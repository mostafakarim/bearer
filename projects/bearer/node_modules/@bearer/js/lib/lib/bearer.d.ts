export default class Bearer {
    readonly clientId: string;
    secured?: boolean;
    config: TBearerOptions;
    private registeredIntegrations;
    private observer?;
    private debounceRefresh;
    private authorizedListener;
    private rejectedListener;
    constructor(clientId: string, options?: Partial<TBearerOptions>);
    /**
     * `connect` lets you easily retrieve `auth-id` for an integration using OAuth authentication. Before using it, you'll need to generate a `setup-id` with the setup component of your integration
     * @argument {string} integration the identifier of the Integration you want to connect to ex: 12345-attach-github-pull-request
     * @argument {string} setupId Setup's identifier you received earlier, a Bearer reference containing all required information about auth mechanism
     * @argument {Object} options Optional parameters like authId if you already have one
     */
    connect: (integration: string, setupId: string, { authId }?: {
        authId?: string | undefined;
    }) => Promise<{
        integration: string;
        authId: string;
    }>;
    private _jsonRequest;
    functionFetch: <DataPayload = any>(integrationId: string, functionName: string, { query, ...params }?: {
        [key: string]: any;
        query?: Record<string, string> | undefined;
    }) => Promise<TFetchBearerData<DataPayload>>;
    /**
     * Retrieve all dom elements starting by bearer- and ask for assets urls if
     */
    loadMissingIntegrations: () => void;
    /**
     * check wether if an integration is resgistered
     */
    registeredIntegration: (tagName: string) => boolean;
    /**
     * load integration asset or wait until dom is loaded
     */
    private initialIntegrationLoading;
    /**
     * Register a DOM observer so that we can load integration assets only when we need them
     */
    private registerDomObserver;
    private observerCallback;
    /**
     * remove dom observer
     */
    private disconnectObserver;
    /**
     * retrieve corresponding integration asset url
     */
    private sendTags;
}
export declare type TBearerOptions = {
    secured?: boolean;
    domObserver: boolean;
    integrationHost: string;
    refreshDebounceDelay: number;
};
/**
 * Extract/format element tag names given a regexp
 * @param elements
 * @param filter
 */
export declare function findElements(elements: HTMLCollection | NodeListOf<Element>, filter?: RegExp): string[];
export declare type TFetchBearerData<T = any> = {
    data: T;
    referenceId?: string;
};
